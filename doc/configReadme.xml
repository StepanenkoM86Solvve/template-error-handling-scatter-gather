<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Error handling Scatter-Gather</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
This Template should serve as a foundation for the process of aggregation accounts from Salesforce and Database Instances and compare them to see which accounts can only be found in one of the two and which accounts are in both instances.

As implemented, it gets two accounts, one from Salesforce and other from Database instance. Then it compares by the name of the accounts, and generates a CSV file which shows accounts in A, accounts in B, and accounts in A and B. The report is then e-mailed to a configured group of e-mail addresses.

For practical purposes this Template will generate the result in the format of a CSV Report sent by mail.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**

**Note:** This particular Anypoint Template illustrate the aggregation use case between SalesForce and a Database, thus it requires a DB instance to work.
The Anypoint Template comes package with a MySQL script to create the DB table that uses.
It is the user responsibility to use that script to create the table in an available schema and change the configuration accordingly.
The SQL script file can be found in [src/main/resources/sfdc2jdbc.sql](../master/src/main/resources/sfdc2jdbc.sql)

This template is customized for MySQL. To use it with different SQL implementation, some changes are necessary:

* update SQL script dialect to desired one
* replace MySQL driver library dependency to desired one in [POM](pom.xml)
* update Database connector configuration in [src/main/mule/config.xml](../master/src/main/mule/config.xml) and `mule.*.properties` file
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app is all set and started, supposing you choose as domain name `sfdc2db-account-aggregation` to trigger the use case you just need to hit `http://sfdc2db-account-aggregation.cloudhub.io/generatereport` and report will be sent to the e-mail addresses configured.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case you just need to hit the local HTTP endpoint with the port you configured in your file. If this is, for instance, `9090` then you should hit: `http://localhost:9090/generatereport` and this will create a CSV report and send it to the mails set.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
**HTTP Connector configuration**

+ http.port `9090`

**Database Connector configuration**

+ db.host `localhost`
+ db.port `3306`
+ db.user `mule`
+ db.password `mule`
+ db.databasename `mule`

**SalesForce Connector configuration**

+ sfdc.username `bob.dylan@sfdc`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`

**SMTP Services configuration**

+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `your%40email.com`
+ smtp.password `password`

**Mail details**

+ mail.from `your@email.com`
+ mail.to `your@email.com`
+ mail.subject `Mail subject`
+ mail.body `Please find attached your Accounts Report`
+ attachment.name `accounts_report.csv`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. However, we make API call to Salesforce only once during aggregation.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you will found the endpoint to start the aggregation.
This Template has a [HTTP Listener Connector](http://www.mulesoft.org/documentation/display/current/HTTP+Listener+Connector) as the way to trigger the use case.

### Trigger Flow
**HTTP Listener Connector** - Start Report Generation

+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented on this XML, directed by one flow responsible of conducting the aggregation of data, comparing records and finally formating the output, in this case being a report.

Using Scatter-Gather component we are querying the data in different systems. After that the aggregation is implemented in DataWeave 2 script using Transform component. Aggregated results are sorted by source of existence:

1. Users only in Salesforce A
2. Users only in Salesforce B
3. Users in both Salesforce A and Salesforce B
and transformed to CSV format. Final report in CSV format is sent to email, that you configured in mule.\*.properties file.
]]>
		</section>
	</sections>
</configuration>
