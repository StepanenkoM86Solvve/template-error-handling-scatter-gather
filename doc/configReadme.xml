<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce and Database User Aggregation</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to aggregate users from a Salesforce Instances and a Database, and compare them to see which users can only be found in one of the two and which users are in both. 

For practical purposes this Anypoint Template will generate the result in the format of a CSV Report sent by mail.

This Anypoint Template should serve as a foundation for extracting data from two systems, aggregating data, comparing values of fields for the objects, and generating a report on the differences. 

As implemented, it gets users from a Salesforce instance and a DB table, compares by the email address of the users, and generates a CSV file which shows users in A, users in B (being "B" the DB), and Users in A and B. The report is then emailed to a configured group of email addresses.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both, that must be made in order for all to run smoothly. **Failling to do so could lead to unexpected behavior of the template.**

**Note:** This particular Anypoint Template ilustrate the aggregation use case between SalesForce and a Data Base, thus it requires a DB instance to work.
The Anypoint Template comes package with a SQL script to create the DB table that uses. 
It is the user responsability to use that script to create the table in an available schema and change the configuration accordingly.
The SQL script file can be found in [src/main/resources/sfdc2jdbc.sql] (../master/src/main/resources/sfdc2jdbc.sql)
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
Once your app is all set and started, supposing you choose as domain name `useraggregation` to trigger the use case you just need to hit `http://useraggregation.cloudhub.io/generatereport` and report will be sent to the emails configured.
]]>
		</section>
		<section id="running_on_standalone">
<![CDATA[
After this, to trigger the use case you just need to hit the local http endpoint with the port you configured in your file. If this is, for instance, `9090` then you should hit: `http://localhost:9090/synccontacts` and this will create a CSV report and send it to the mails set.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ http.port `9090` 

#### SalesForce Connector configuration for company A
+ sfdc.username `bob.dylan@orga`
+ sfdc.password `DylanPassword123`
+ sfdc.securityToken `avsfwCUl7apQs56Xq2AKi3X`
+ sfdc.url `https://login.salesforce.com/services/Soap/u/32.0`

#### Database Connector configuration
+ db.jdbcUrl `jdbc:mysql://localhost:3306/sfdc2jdbc?rewriteBatchedStatements=true&user=root&password=password`

#### SMPT Services configuration
+ smtp.host `smtp.gmail.com`
+ smtp.port `587`
+ smtp.user `exampleuser@gmail.com`
+ smtp.password `ExamplePassword456`

#### Mail details
+ mail.from `exampleuser@gmail.com`
+ mail.to `woody.guthrie@gmail.com`
+ mail.subject `SFDC Users Report`
+ mail.body `Users report comparing users from SFDC Accounts`
+ attachment.name `OrderedReport.csv`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
SalesForce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. User Anypoint Template calls to the API can be calculated using the formula:

***1 + UsersToSync + UsersToSync / CommitSize***

Being ***UsersToSync*** the number of Users to be synchronized on each run. 

The division by ***CommitSize*** is because by default, for each Upsert API Call, Users are gathered in groups of a number defined by the Commit Size property. Also consider that this calls are executed repeatedly every polling cycle.	

For instance if 10 records are fetched from origin instance, then 12 api calls will be made (1 + 10 + 1).
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is the file where you will found the inbound and outbound sides of your integration app.
This Anypoint Template has an [HTTP Inbound Endpoint](http://www.mulesoft.org/documentation/display/current/HTTP+Endpoint+Reference) as the way to trigger the use case and an [SMTP Transport](http://www.mulesoft.org/documentation/display/current/SMTP+Transport+Reference) as the outbound way to send the report.

$H$H# Trigger Flow
**HTTP Inbound Endpoint** - Start Report Generation
+ `${http.port}` is set as a property to be defined either on a property file or in CloudHub environment variables.
+ The path configured by default is `generatereport` and you are free to change for the one you prefer.
+ The host name for all endpoints in your CloudHub configuration should be defined as `localhost`. CloudHub will then route requests from your application domain URL to the endpoint.

$H$H# Outbound Flow
**SMTP Outbound Endpoint** - Send Mail
+ Both SMTP Server configuration and the actual mail to be sent are defined in this endpoint.
+ This flow is going to be invoked from the flow that does all the functional work: *mainFlow*, the same that is invoked from the Inbound Flow upon triggering of the HTTP Endpoint.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Anypoint Template is implemented on this XML, directed by one flow responsible of conducting the aggregation of data, comparing records and finally formating the output, in this case being a report.
The *mainFlow* organises the job in three different steps and finally invokes the *outboundFlow* that will deliver the report to the corresponding outbound endpoint.
This flow has Exception Strategy that basically consists on invoking the *defaultChoiseExceptionStrategy* defined in *errorHandling.xml* file.


$H$H# Gather Data Flow
Mainly consisting of two calls (Queries) one to SalesForce and one to a DB and storing each response on the Invocation Variable named *usersFromOrgA* or *usersFromDB* accordingly.

[Scatter Gather](http://www.mulesoft.org/documentation/display/current/Scatter-Gather) is responsible for aggregating the results from the two collections of Users.
Criteria and format applied:
+ Scatter Gather component implements an aggregation strategy that results in List of Maps with keys: **Name**, **Email**, **IDInA**, **UserNameInA**, **IDInB** and 
**UserNameInB**.
+ Users will be matched by an email, that is to say, a record in both SFDC organisations with same mail is considered the same user.

$H$H# Format Output Flow
+ [Java Transformer](http://www.mulesoft.org/documentation/display/current/Java+Transformer+Reference) responsible for sorting the list of users in the following order:

1. Users only in Org A
2. Users only in Org B
3. Users in both Org A and Org B

All records ordered alphabetically by mail within each category.
If you want to change this order then the *compare* method should be modified.

+ CSV Report [DataWeave](http://www.mulesoft.org/documentation/display/current/DataWeave+Reference+Documentation) transforming the List of Maps in CSV with headers **Name**, **Email**, **IDInA**, **UserNameInA**, **IDInB** and **UserNameInB**.
+ An [Object to string transformer](http://www.mulesoft.org/documentation/display/current/Transformers) is used to set the payload as an String. 
]]>
		</section>
		<section id="default_error_handling_xml">
		<![CDATA[
This is the right place to handle how your integration will react depending on the different exceptions. 
This file holds a [Choice Exception Strategy](http://www.mulesoft.org/documentation/display/current/Choice+Exception+Strategy) that is referenced by the main flow in the business logic.

If there is an error in *gatherDataFlow* when obtaining data for aggregation, it will be at first handled in *UserMergeAggregationStrategy* class. Scatter-gather component is using this custom aggregation strategy class which overrides its default aggregation strategy to perform aggregation of the retrieved data with desired error handling. For more details click [here](https://docs.mulesoft.com/mule-user-guide/v/3.7/scatter-gather#scatter-gather-behavior-and-exceptions). After that an error will be routed to errorHandling.xml.

In the case no data could be obtained from connectors, relevant error will be thrown out of the *UserMergeAggregationStrategy* class. In the errorHandling.xml it will be routed to the correct catch block under the *defaultChoiceExceptionStrategy*. Each error specified in the catch block can be treated different way. Now there are three different kinds of errors specified:

+ *LoginFault* Exception - occurs in the case of incorrect Salesforce credentials
+ *InvalidFieldFault* Exception - occurs in the case of incorrect column name in the Salesforce query
+ *Exception* - any other exception except the previous two

New exceptions can be added and treated required way in errorHandling.xml file.

Data obtained from just one route while the one one failed is considered recoverable scenario. No error message is logged and data from one route are processed expected way. This can be changed in the *UserMergeAggregationStrategy* class.

All included connectors supports [Reconnection Strategies](https://docs.mulesoft.com/mule-user-guide/v/3.7/configuring-reconnection-strategies). Reconnection Strategies specify how a connector behaves when its connection fails. In this template all connectors have standard reconnection strategy specified to 5 reconnection attempts with frequency 5000ms. You can change reconnection strategy in connector configuration window by selecting tab *Reconnection*.
]]>
		</section>
	</sections>
</configuration>